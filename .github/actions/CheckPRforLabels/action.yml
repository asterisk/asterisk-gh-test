name: CheckPRforLabels
description: 'Check PR for specific labels.  Fail if not found.'
inputs:
  require_only_one_of:
    description: |
      Comma separated list of regex patterns. One (and only one) label
      must match each regex in the list.
    required: true
    default: ''
  require_at_least_one_of:
    description: |
      Comma separated list of regex patterns. At least one label
      must match each regex in the list.
    required: true
    default: ''
runs:
  using: "composite"
  steps:
    - name: "Checking PR for Labels ${{inputs.required_labels}}"
      env:
        REQUIRE_ONLY_ONE_OF: ${{inputs.require_only_one_of}}
        REQUIRE_AT_LEAST_ONE_OF: ${{inputs.require_at_least_one_of}}
        GH_TOKEN: ${{ github.token }}
      shell: bash
      run: |
        set -e +v +x
        echo "event path: $GITHUB_EVENT_PATH"
        PR=$(jq '.number' $GITHUB_EVENT_PATH)
        echo "::notice::Checking Pull Request $PR"
        echo "::notice::Labels required: $REQUIRED_LABELS"
        LABELS=$( gh api /repos/asterisk/asterisk-gh-test/pulls/${PR} --jq '.labels[].name')
        echo "::notice::Labels on PR: $LABELS"
        rc=0
        IFS=$','
        for rl in $REQUIRE_ONLY_ONE_OF ; do
          has_it=0
          for l in $LABELS ; do
            [[ $l =~ $rl ]] && has_it+=1
          done
          if [ $has_it -eq 0 ] ; then
            echo "::error::At least 1 label must match '$rl'"
            rc=1
          fi
          if [ $has_it -gt 1 ] ; then
            echo "::error::Only one label can match '$rl'"
            rc=1
          fi
        done
        for rl in $REQUIRE_AT_LEAST_ONE_OF ; do
          has_it=0
          for l in $LABELS ; do
            [[ $l =~ $rl ]] && has_it+=1
          done
          if [ $has_it -eq 0 ] ; then
            echo "::error::At least 1 label must match '$rl'"
            rc=1
          fi
        done
        if [ $rc -eq 0 ] ; then
          echo "::notice::The PR has good labels"
        else
          echo "::error::The PR failed at least 1 label check"
        fi
        exit $rc
