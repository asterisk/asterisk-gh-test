name: Process Pull Request
run-name: ${{ github.actor }} is doing a pull request
on:
#  workflow_dispatch:
#  issue_comment
  pull_request:
    types: [opened, reopened]

#permissions:
#  actions: read
#  checks: write
#  contents: read
#  deployments: read
#  issues: read
#  pull-requests: write
#  statuses: write

jobs:
  AsteriskUnitTests:
#    if: (github.event.issue.pull_request && startsWith(github.event.comment.body, 'recheck'))
    runs-on: ubuntu-latest
    container:
      image: public.ecr.aws/t8c9l3c7/asteriskci-agent-rocky8:latest
      volumes:
        - /srv/cache/unittests:/usr/src/asterisk/asterisk-gh-test/asterisk

    steps:
      - name: Setup for local ACT
        if: ${{ env.ACT }}
        run: |
          if [ -z "${ASTERISK_CI_URL}" ] || [ -z "${ASTERISK_URL}" ] ; then
            echo "::error::ASTERISK_CI_URL and ASTERISK_URL must be set in the environment"
            exit 1
          fi
          echo "::notice::Setting ASTERISK_CI_URL and ASTERISK_URL from environment"
          echo "PWD: $PWD"
          mount

      - name: Pre-checkout
        run: echo "::group::Checkout"

#      - name: Checkout Asterisk (local testing)
#        if: env.ACT && env.ASTERISK_URL != ''
#        run: |
#          git config --global --add safe.directory ${PWD}/asterisk
#          #rm -rf ./asterisk &>/dev/null || :
#          rsync -aH ${ASTERISK_URL}/. ./asterisk/

        # If running in production, we'll use the normal checkout
        # action to get the repo.
      - name: Checkout Asterisk
#        if: ${{ !env.ACT }}
        uses: actions/checkout@v3
        with:
          path: 'asterisk'
          # Whether to execute `git clean -ffdx && git reset --hard HEAD` before fetching
          # Default: true
          clean: true
          fetch-depth: 1
          # Add repository path as safe.directory for Git global config by running `git
          # config --global --add safe.directory <path>`
          # Default: true
          set-safe-directory: true

      - name: Post-checkout
        run: echo "::endgroup::"
        
      - name: Setup Asterisk Build Environment
        run: |
          cd asterisk
          echo "PWD: $PWD"
          mkdir -p /srv/cache/externals /srv/cache/sounds /srv/cache/ccache || :
          chown -R asteriskci:users /srv/cache
          chmod g+rw /srv/cache/ccache
          chmod g+s /srv/cache/ccache
          mkdir -p tests/CI/output || :
          chown -R asteriskci:users tests/CI/output
          echo "::group::github_trigger_event"
          echo '${{ toJSON(github.event) }}' > tests/CI/output/event.json
          echo "::endgroup::"

      - name: Build Asterisk
        run: |
          cd asterisk
          echo "PWD: $PWD"
          if [ -f ./tests/CI/output/is-built ] ; then
            echo "Asterisk is already built"
            exit 0
          fi
          ./tests/CI/buildAsterisk.sh --github --branch-name=master --output-dir=./tests/CI/output
          touch ./tests/CI/output/is-built

      - name: Install Asterisk
        if: ${{ success() }}
        run: |
          cd asterisk
          echo "PWD: $PWD"
          if [ -f ./tests/CI/output/is-installed ] ; then
            echo "Asterisk is already installed"
            exit 0
          fi
          ./tests/CI/installAsterisk.sh --github --uninstall-all --branch-name=master --user-group=asteriskci:users 
          touch ./tests/CI/output/is-installed

      - name: Run Unit Tests
        if: ${{ success() }}
        run: |
          cd asterisk
          echo "PWD: $PWD"
          tests/CI/runUnittests.sh --github --user-group=asteriskci:users \
            --output-dir=./tests/CI/output \
            --output-xml=./tests/CI/output/unittests-results.xml \
            --unittest-command="test execute categoty /main/json"

      - name: Save Output
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: "Unit Uest Results"
          path: asterisk/tests/CI/output

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Asterisk Unit Tests Report
          working-directory: asterisk
          path: ./tests/CI/output/unittests-results.xml
          reporter: java-junit
          token: ${{ secrets.GITHUB_TOKEN }}
