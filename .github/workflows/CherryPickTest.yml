name: CherryPickTest
run-name: "Cherry-Pick Tests for PR ${{github.event.number}}"
on:
  pull_request_target:
    types: [ labeled ]

concurrency:
  group: ${{github.workflow}}-${{github.event.number}}
  cancel-in-progress: true

env:
  ASTERISK_REPO:     ${{ github.repository }}
  PR_NUMBER:         ${{ github.event.number }}
  PR_COMMIT:         ${{ github.event.pull_request.head.sha }}
  GITHUB_TOKEN:      ${{ secrets.GITHUB_TOKEN }}
  GH_TOKEN:          ${{ secrets.GITHUB_TOKEN }}
  MODULES_BLACKLIST: ${{ vars.GATETEST_MODULES_BLACKLIST }} ${{ vars.UNITTEST_MODULES_BLACKLIST }}

jobs:
  IdentifyBranches:
    name: IdentifyBranches
    if: github.event.label.name == ${{vars.CHERRY_PICK_TEST_LABEL}}
    outputs:
      branches: ${{ steps.getbranches.outputs.branches }}
    runs-on: ubuntu-latest
    steps:
      - name: DumpEnvironment
        uses: asterisk/asterisk-ci-actions/DumpEnvironmentAction@main

      - name: Get cherry-pick branches
        uses: asterisk/asterisk-ci-actions/GetCherryPickBranchesFromPR@main
        id: getbranches
        with:
          asterisk_repo: ${{env.ASTERISK_REPO}}
          pr_number:     ${{env.PR_NUMBER}}
          github_token:  ${{env.GITHUB_TOKEN}}

  AsteriskUnitTestMatrix:
    needs: [ IdentifyBranches ]
    continue-on-error: false
    strategy:
      fail-fast: true
      matrix:
        branch: ${{ fromJSON(needs.IdentifyBranches.outputs.branches) }}
    runs-on: ubuntu-latest
    steps:
      - name: Run Unit Tests
        uses: asterisk/asterisk-ci-actions/AsteriskUnitComposite@main
        with:
          test_type:         Gate
          asterisk_repo:     ${{env.ASTERISK_REPO}}
          pr_number:         ${{env.PR_NUMBER}}
          base_branch:       ${{matrix.branch}}
          is_cherry_pick:    true
          modules_blacklist: ${{env.MODULES_BLACKLIST}}
          github_token:      ${{secrets.GITHUB_TOKEN}}
          unittest_command:  ${{vars.UNITTEST_COMMAND}}

  AsteriskUnitTests:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: AsteriskUnitTestMatrix
    steps:
      - name: Check unit test matrix status
        env:
          RESULT: ${{needs.AsteriskUnitTestMatrix.result}}
        run: |
          case $RESULT in
            success)
              echo "::notice::All tests passed"
              exit 0
              ;;
            skipped)
              echo "::notice::Unit tests were skipped because of an earlier failure"
              exit 1
              ;;
              *)
              echo "::error::One or more tests failed"
              exit 1
          esac

  AsteriskGateTestMatrix:
    needs: [ IdentifyBranches, AsteriskUnitTests ]
    if: ${{ success() }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        branch: ${{ fromJSON(needs.IdentifyBranches.outputs.branches) }}
        group: ${{ fromJSON(vars.GATETEST_LIST) }}
    runs-on: ubuntu-latest
    steps:
      - name: Run Gate Tests for ${{ matrix.group }}
        uses: asterisk/asterisk-ci-actions/AsteriskGateComposite@main
        with:
          test_type:         Gate
          asterisk_repo:     ${{env.ASTERISK_REPO}}
          pr_number:         ${{env.PR_NUMBER}}
          base_branch:       ${{matrix.branch}}
          is_cherry_pick:    true
          modules_blacklist: ${{env.MODULES_BLACKLIST}}
          github_token:      ${{secrets.GITHUB_TOKEN}}
          testsuite_repo:    ${{vars.TESTSUITE_REPO}}
          gatetest_group:    ${{matrix.group}}
          gatetest_commands: ${{vars.GATETEST_COMMANDS}}

  AsteriskGateTests:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: AsteriskGateTestMatrix
    steps:
      - name: Check test matrix status
        env:
          RESULT: ${{needs.AsteriskGateTestMatrix.result}}
        run: |
          case $RESULT in
            success)
              echo "::notice::All Testsuite tests passed"
              exit 0
              ;;
            skipped)
              echo "::error::Testsuite tests were skipped because of an earlier failure"
              exit 1
              ;;
              *)
              echo "::error::One or more Testsuite tests failed"
              exit 1
          esac
