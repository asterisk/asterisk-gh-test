# This workflow checks that a PR can be cherry-picked
# to the desired branches.  Here's how...
#
# 1.  

name: CherryPickTest
run-name: "Cherry-Pick Tests for PR ${{github.event.number}}"
on:
  pull_request_target:
    types: [ labeled ]
  
env:
  ASTERISK_REPO:     ${{ github.repository }}
  PR_NUMBER:         ${{ github.event.number }}
  PR_COMMIT:         ${{ github.event.pull_request.head.sha }}
  GITHUB_TOKEN:      ${{ secrets.GITHUB_TOKEN }}
  GH_TOKEN:          ${{ secrets.GITHUB_TOKEN }}
  MODULES_BLACKLIST: ${{ vars.GATETEST_MODULES_BLACKLIST }} ${{ vars.UNITTEST_MODULES_BLACKLIST }}

jobs:
  IdentifyBranches:
    name: IdentifyBranches
    if: github.event.label.name == ${{vars.CHERRY_PICK_TEST_LABEL}}
    outputs:
      branches: ${{ steps.getbranches.outputs.branches }}
    runs-on: ubuntu-latest
    steps:
      - name: DumpEnvironment
        uses: asterisk/asterisk-ci-actions/DumpEnvironmentAction@main

      - name: Get cherry-pick branches
        id: getbranches
        run: |
          echo "${{env.GITHUB_ACTION}} Get branches"
          gh pr edit --repo ${ASTERISK_REPO} --remove-label ${{vars.CHERRY_PICK_TEST_LABEL}} ${PR_NUMBER}
          # now scan the comments
          branchlist=$(gh api /repos/${ASTERISK_REPO}/issues/${PR_NUMBER}/comments \
            --jq '.[].body | match("${{ vars.CHERRY_PICK_REGEX }}"; "g") | .captures[0].string' | tr '\n' ' ')
          echo $branchlist
          eval declare -a BRANCHES=( $branchlist )
          declare -p BRANCHES
          branch_count=0
          json="["
          for branch in ${BRANCHES[@]} ; do
            echo "Will cherry-pick to branch $branch"
            [ $branch_count -ne 0 ] && json+=","
            json+="'$branch'"
            branch_count+=1
          done
          json+="]"
          echo "branches=$json" >> "$GITHUB_OUTPUT"
          echo "IDENTIFIED_BRANCHES=$json" >> "$GITHUB_ENV"
          if [ $branch_count -eq 0 ] ; then
            echo "::notice::No branches needing cherry picks identified"
          else
            echo "::notice::Branches that will have cherry-picks testeds: $json"
          fi

  AsteriskUnitTestMatrix:
    needs: [ IdentifyBranches ]
    continue-on-error: false
    strategy:
      fail-fast: true
      matrix:
        branch: ${{ fromJSON(needs.IdentifyBranches.outputs.branches) }}
    runs-on: ubuntu-latest
    steps:
      - name: SetupIPV6
        uses: asterisk/asterisk-ci-actions/EnableIPv6InRunner@main

      - name: Install Asterisk
        uses: asterisk/asterisk-ci-actions/GetAsterisk@main
        with:
          asterisk_repo:     ${{env.ASTERISK_REPO}}
          base_branch:       ${{matrix.branch}}
          pr_number:         ${{env.PR_NUMBER}}
          github_token:      ${{secrets.GITHUB_TOKEN}}
          modules_blacklist: ${{env.MODULES_BLACKLIST}}

      - name: Run Unit Tests
        uses: asterisk/asterisk-ci-actions/RunAsteriskUnitTests@main
        with:
          asterisk_repo:    ${{env.ASTERISK_REPO}}
          base_branch:      ${{matrix.branch}}
          pr_number:        ${{env.PR_NUMBER}}
          github_token:     ${{secrets.GITHUB_TOKEN}}
          unittest_command: ${{vars.UNITTEST_COMMAND}}

      - name: Save Output
        id: save-output
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: Unit Test Output for branch ${{matrix.branch}}
          path: cache/output

      - name: Publish Unit Test Results
        id: publish-results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2.4.2
        with:
          check_name: Unit Test Results
          comment_title: Unit Test Results for branch ${{matrix.branch}}
          files: cache/output/*.xml
          comment_mode: always
          compare_to_earlier_commit: false
          report_individual_runs: true
          check_run_annotations_branch: ${{matrix.branch}}
          action_fail: true
        env:
          GITHUB_REPOSITORY: ${{env.ASTERISK_REPO}}

  AsteriskUnitTests:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: AsteriskUnitTestMatrix
    steps:
      - name: Check unit test matrix status
        env:
          RESULT: ${{needs.AsteriskUnitTestMatrix.result}}
        run: |
          case $RESULT in
            success)
              echo "::notice::All tests passed"
              exit 0
              ;;
            skipped)
              echo "::notice::Unit tests were skipped because of an earlier failure"
              exit 1
              ;;
              *)
              echo "::error::One or more tests failed" 
              exit 1
          esac

  AsteriskGateTestMatrix:
    needs: [ IdentifyBranches, AsteriskUnitTests ]
    if: ${{ success() }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        branch: ${{ fromJSON(needs.IdentifyBranches.outputs.branches) }}
        group: ${{ fromJSON(vars.GATETEST_LIST) }}
    runs-on: ubuntu-latest
    steps:
      - name: SetupIPV6
        uses: asterisk/asterisk-ci-actions/EnableIPv6InRunner@main

      - name: Install Asterisk
        uses: asterisk/asterisk-ci-actions/GetAsterisk@main
        with:
          asterisk_repo:     ${{env.ASTERISK_REPO}}
          base_branch:       ${{matrix.branch}}
          pr_number:         ${{env.PR_NUMBER}}
          github_token:      ${{secrets.GITHUB_TOKEN}}
          modules_blacklist: ${{env.MODULES_BLACKLIST}}
    
      - name: Run Gate Tests for group ${{ matrix.group }} branch ${{ matrix.branch }} 
        uses: asterisk/asterisk-ci-actions/RunAsteriskGateTests@main
        with:
          asterisk_repo:     ${{env.ASTERISK_REPO}}
          pr_number:         ${{env.PR_NUMBER}}
          base_branch:       ${{matrix.branch}}
          github_token:      ${{secrets.GITHUB_TOKEN}}
          testsuite_repo:    ${{vars.TESTSUITE_REPO}}
          gatetest_group:    ${{matrix.group}}
          gatetest_commands: ${{vars.GATETEST_COMMANDS}} 

      - name: Save Output
        id: save-output
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: Gate Test Output for for group ${{ matrix.group }} branch ${{ matrix.branch }}
          path: testsuite/logs

      - name: Publish Unit Test Results
        id: publish-results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2.4.2
        with:
          check_name: Gate Test Results
          comment_title: Gate Test Results for group ${{ matrix.group }} branch ${{ matrix.branch }}
          files: testsuite/*.xml
          comment_mode: always
          compare_to_earlier_commit: false
          report_individual_runs: true
          action_fail: true
        env:
          GITHUB_REPOSITORY: ${{env.ASTERISK_REPO}}

  AsteriskGateTests:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: AsteriskGateTestMatrix
    steps:
      - name: Check test matrix status
        env:
          RESULT: ${{needs.AsteriskGateTestMatrix.result}}
        run: |
          case $RESULT in
            success)
              echo "::notice::All Testsuite tests passed"
              exit 0
              ;;
            skipped)
              echo "::error::Testsuite tests were skipped because of an earlier failure"
              exit 1
              ;;
              *)
              echo "::error::One or more Testsuite tests failed" 
              exit 1
          esac
