# This workflow checks that a PR can be cherry-picked
# to the desired branches.  Here's how...
#
# 1.  

name: CherryPickTest
run-name: "Cherry-Pick Tests for PR ${{github.event.number}}"
on:
  pull_request_target:
    types: [ labeled ]
  
env:
  CACHE_KEY:         PR:${{ github.event.number }}-RUN:${{ github.run_number }}-RID:${{ github.run_id }}
  ASTERISK_REPO:     ${{ github.repository }}
  PR_NUMBER:         ${{ github.event.number }}
  PR_COMMIT:         ${{ github.event.pull_request.head.sha }}
  GITHUB_TOKEN:      ${{ secrets.GITHUB_TOKEN }}
  GH_TOKEN:          ${{ secrets.GITHUB_TOKEN }}
  MODULES_BLACKLIST: ${{ vars.GATETEST_MODULES_BLACKLIST }} ${{ vars.UNITTEST_MODULES_BLACKLIST }}

jobs:
  IdentifyBranches:
    name: IdentifyBranches
    if: github.event.label.name == ${{vars.CHERRY_PICK_TEST_LABEL}}
    outputs:
      branches: ${{ steps.getbranches.outputs.branches }}
    runs-on: ubuntu-latest
    steps:
      - name: DumpEnvironment
        uses: asterisk/asterisk-ci-actions/DumpEnvironmentAction@main

      - name: Get cherry-pick branches
        id: getbranches
        run: |
          echo "${{env.GITHUB_ACTION}} Get branches"
          gh pr edit --repo ${ASTERISK_REPO} --remove-label ${{vars.CHERRY_PICK_TEST_LABEL}} ${PR_NUMBER}
          # now scan the comments
          branchlist=$(gh api /repos/${ASTERISK_REPO}/issues/${PR_NUMBER}/comments \
            --jq '.[].body | match("${{ vars.CHERRY_PICK_REGEX }}"; "g") | .captures[0].string' | tr '\n' ' ')
          echo $branchlist
          eval declare -a BRANCHES=( $branchlist )
          declare -p BRANCHES
          branch_count=0
          json="["
          for branch in ${BRANCHES[@]} ; do
            echo "Will cherry-pick to branch $branch"
            [ $branch_count -ne 0 ] && json+=","
            json+="'$branch'"
            branch_count+=1
          done
          json+="]"
          echo "branches=$json" >> "$GITHUB_OUTPUT"
          echo "IDENTIFIED_BRANCHES=$json" >> "$GITHUB_ENV"
          if [ $branch_count -eq 0 ] ; then
            echo "::notice::No branches needing cherry picks identified"
          else
            echo "::notice::Branches that will have cherry-picks testeds: $json"
          fi

  AsteriskBuildMatrix:
    needs: IdentifyBranches
    if: needs.IdentifyBranches.outputs.branches != '[]'
    continue-on-error: false
    strategy:
      fail-fast: true
      matrix:
        branch: ${{ fromJSON(needs.IdentifyBranches.outputs.branches) }}
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/asterisk/asteriskci-agent-rocky8:latest
    steps:
      - name: Building and Saving Asterisk for branch ${{matrix.branch}}
        uses: asterisk/asterisk-ci-actions/GetAsterisk@main
        with:
          to-cache-key:      ${{env.CACHE_KEY}}-${{matrix.branch}}
          asterisk-repo:     ${{env.ASTERISK_REPO}}
          pr-number:         ${{env.PR_NUMBER}}
          base-branch:       ${{matrix.branch}}
          is-cherry-pick:    true
          github-token:      ${{secrets.GITHUB_TOKEN}}
          modules-blacklist: ${{env.MODULES_BLACKLIST}}

  AsteriskBuilds:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: AsteriskBuildMatrix
    steps:
      - name: Check build matrix status
        env:
          RESULT: ${{needs.AsteriskBuildMatrix.result}}
        run: |
          case $RESULT in
            success)
              echo "::notice::All builds succeeded"
              exit 0
              ;;
            skipped)
              echo "::notice::Builds were skipped because of an earlier failure"
              exit 1
              ;;
              *)
              echo "::error::One or more builds failed" 
              exit 1
          esac

  AsteriskUnitTestMatrix:
    needs: [ IdentifyBranches, AsteriskBuilds ]
    continue-on-error: false
    strategy:
      fail-fast: true
      matrix:
        branch: ${{ fromJSON(needs.IdentifyBranches.outputs.branches) }}
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/asterisk/asteriskci-agent-rocky8:latest
    steps:
      - name: Restoring Asterisk from cache for branch ${{ matrix.branch }}
        uses: asterisk/asterisk-ci-actions/GetAsterisk@main
        with:
          from-cache-key: ${{env.CACHE_KEY}}-${{matrix.branch}}
          asterisk-repo:  ${{env.ASTERISK_REPO}}
          base-branch:    ${{matrix.branch}}
    
      - name: Run Unit Tests
        uses: asterisk/asterisk-ci-actions/RunAsteriskUnitTests@main
        with:
          asterisk-repo:     ${{env.ASTERISK_REPO}}
          pr-number:         ${{env.PR_NUMBER}}
          pr-commit:         ${{env.PR_COMMIT}}
          base-branch:       ${{matrix.branch}}
          github-token:      ${{secrets.GITHUB_TOKEN}}
          unittest-command:  ${{vars.UNITTEST_COMMAND}}

  AsteriskUnitTests:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: AsteriskUnitTestMatrix
    steps:
      - name: Check unit test matrix status
        env:
          RESULT: ${{needs.AsteriskUnitTestMatrix.result}}
        run: |
          case $RESULT in
            success)
              echo "::notice::All tests passed"
              exit 0
              ;;
            skipped)
              echo "::notice::Unit tests were skipped because of an earlier failure"
              exit 1
              ;;
              *)
              echo "::error::One or more tests failed" 
              exit 1
          esac

  AsteriskGateTestMatrix:
    needs: [ IdentifyBranches, AsteriskUnitTests ]
    if: ${{ success() }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        branch: ${{ fromJSON(needs.IdentifyBranches.outputs.branches) }}
        group: ${{ fromJSON(vars.GATETEST_LIST) }}
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/asterisk/asteriskci-agent-rocky8:latest
    steps:
      - name: Install Asterisk for branch ${{ matrix.branch }}
        uses: asterisk/asterisk-ci-actions/GetAsterisk@main
        with:
          from-cache-key: ${{env.CACHE_KEY}}-${{matrix.branch}}
          asterisk-repo:  ${{env.ASTERISK_REPO}}
          base-branch:    ${{matrix.branch}}

      - name: Run Gate Tests for branch ${{matrix.branch}} group ${{matrix.group}}
        uses: asterisk/asterisk-ci-actions/RunAsteriskGateTests@main
        with:
          asterisk-repo:     ${{env.ASTERISK_REPO}}
          pr-number:         ${{env.PR_NUMBER}}
          pr-commit:         ${{env.PR_COMMIT}}
          base-branch:       ${{matrix.branch}}
          github-token:      ${{secrets.GITHUB_TOKEN}}
          testsuite-repo:    ${{vars.TESTSUITE_REPO}}
          gatetest-group:    ${{matrix.group}}
          gatetest-commands: ${{vars.GATETEST_COMMANDS}} 

  AsteriskGateTests:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: AsteriskGateTestMatrix
    steps:
      - name: Check test matrix status
        env:
          RESULT: ${{needs.AsteriskGateTestMatrix.result}}
        run: |
          case $RESULT in
            success)
              echo "::notice::All Testsuite tests passed"
              exit 0
              ;;
            skipped)
              echo "::notice::Testsuite tests were skipped because of an earlier failure"
              exit 1
              ;;
              *)
              echo "::error::One or more Testsuite tests failed" 
              exit 1
          esac
